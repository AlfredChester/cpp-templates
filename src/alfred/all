#ifndef ALFRED_ALL
#define ALFRED_ALL

#include "data_structure/appear-statistics.hpp"
#include "data_structure/binary-trie.hpp"
#include "data_structure/cancel-dsu.hpp"
#include "data_structure/chtholly.hpp"
#include "data_structure/discretization.hpp"
#include "data_structure/dsu.hpp"
#include "data_structure/fenwick.hpp"
#include "data_structure/pbds-balance-tree.hpp"
#include "data_structure/priority-set.hpp"
#include "data_structure/sliding-window.hpp"
#include "data_structure/sparse-table.hpp"
#include "data_structure/sum.hpp"
#include "data_structure/weighted-dsu.hpp"

#include "graph/graph.hpp"
// #include "graph/lca.hpp" // Will be included after graph class is implemented well enough

#include "math/comb.hpp"
#include "math/computation-geometry.hpp"
#include "math/lagrange.hpp"
#include "math/mod-int.hpp"
#include "math/prime.hpp"
#include "math/speed-of-light-power.hpp"

#include "string/hashed-string.hpp"

// typedefs and constants:

using u32 = unsigned;
using u64 = unsigned long long;
using i64 = long long;
using i128 = __int128;
using f64 = long double;

constexpr f64 eps = 1e-9; // !!!
constexpr int inf32 = (1ll << 30) - 1;
constexpr i64 inf64 = (1ll << 62) - 1;

#include <iostream>

inline void YES(void) { std::cout << "YES\n"; }
inline void Yes(void) { std::cout << "Yes\n"; }
inline void NO(void) { std::cout << "NO\n"; }
inline void No(void) { std::cout << "No\n"; }
inline void YES_NO(bool cond) { cond ? YES() : NO(); }
inline void Yes_No(bool cond) { cond ? Yes() : No(); }

#endif // ALFRED_ALL