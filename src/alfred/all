#ifndef ALFRED_ALL
#define ALFRED_ALL

#include "algorithm/pair-counting.hpp"
#include "algorithm/utils.hpp"

#include "data_structure/appear-statistics.hpp"
// #include "data_structure/binary-trie.hpp" // Temporary remove trie.
#include "data_structure/cartesian.hpp"
#include "data_structure/chtholly.hpp"
#include "data_structure/discretization.hpp"
#include "data_structure/dsu/cancel-dsu.hpp"
#include "data_structure/dsu/dsu.hpp"
#include "data_structure/dsu/weighted-dsu.hpp"
#include "data_structure/dynamic-bitset.hpp"
#include "data_structure/fenwick.hpp"
#include "data_structure/info.hpp"
#include "data_structure/priority-set.hpp"
#include "data_structure/sliding-window.hpp"
#include "data_structure/sparse-table.hpp"
#include "data_structure/sum.hpp"

#include "graph/graph.hpp"
#include "graph/grid.hpp"
#include "graph/hld.hpp"
#include "graph/lca.hpp" // Will be included after graph class is implemented well enough

#include "math/comb.hpp"
#include "math/computation-geometry.hpp"
#include "math/lagrange.hpp"
#include "math/linear.hpp"
#include "math/mod-int.hpp"
#include "math/speed-of-light-power.hpp"
#include "math/sqrt-decomposition.hpp"
#include "math/utils.hpp"

#include "string/hashed-string.hpp"
#include "string/suffix-array.hpp"

// typedefs and constants:

using u32 = unsigned;
using u64 = unsigned long long;
using i64 = long long;
using i128 = __int128;
using f64 = long double;

constexpr f64 eps = 1e-9; // !!!
constexpr int inf32 = (1ll << 30) - 1;
constexpr i64 inf64 = (1ll << 62) - 1;

#include "config/fast-io.hpp"
#include <bits/stdc++.h>

inline void YES(void) { std::cout << "YES\n"; }
inline void Yes(void) { std::cout << "Yes\n"; }
inline void NO(void) { std::cout << "NO\n"; }
inline void No(void) { std::cout << "No\n"; }
inline void YES_NO(bool cond) { cond ? YES() : NO(); }
inline void Yes_No(bool cond) { cond ? Yes() : No(); }

std::ostream &operator<<(std::ostream &os, i128 n) {
    std::string s;
    if (n < 0) {
        os << '-', n = -n;
    }
    while (n > 0) {
        s += '0' + n % 10;
        n /= 10;
    }
    std::reverse(s.begin(), s.end());
    return os << s;
}

std::istream &operator>>(std::istream &is, i128 &n) {
    std::string s;
    is >> s, n = 0;
    for (auto &c : s) {
        if (c == '-') continue;
        n = n * 10 + (c - '0');
    }
    if (s[0] == '-') n = -n;
    return is;
}

#endif // ALFRED_ALL
