{
    "Check Environment": {
        "prefix": "#ifdef LOCAL",
        "body": [
            "#ifdef LOCAL",
            "$1",
            "#else",
            "$2",
            "#endif"
        ],
        "description": "Check if LOCAL is defined"
    },
    "FastIO": {
        "prefix": "fastio",
        "body": [
            "namespace fastIO {",
            "    char c, f, e = 0;",
            "    namespace usr {",
            "        template <class T>",
            "        inline int read(T &x) {",
            "            x = f = 0, c = getchar();",
            "            while (!isdigit(c) && !e) f = c == '-', e |= c == EOF, c = getchar();",
            "            while (isdigit(c) && !e) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();",
            "            return (e |= c == EOF) ? 0 : ((f ? x = -x : 0), 1);",
            "        }",
            "        template <class T>",
            "        inline void write(T x) {",
            "            if (x < 0) putchar('-'), x = -x;",
            "            if (x > 9) write(x / 10);",
            "            putchar((x % 10) ^ 48);",
            "        }",
            "        template <class T>",
            "        inline void writeln(T x) { write(x), puts(\"\"); }",
            "        template <typename T, typename... V>",
            "        inline void read(T &t, V &...v) { read(t), read(v...); }",
            "        template <typename T, typename... V>",
            "        inline void write(T t, V... v) {",
            "            write(t), putchar(' '), write(v...);",
            "        }",
            "    }",
            "}",
            "using namespace fastIO::usr;"
        ],
        "description": "Fast input and output"
    },
    "Balanced Tree": {
        "prefix": "Balanced Tree",
        "body": [
            "tree<$1, null_type, less_equal<$1>, rb_tree_tag, tree_order_statistics_node_update> $2;"
        ],
        "description": "less_equal balanced tree"
    },
    "Optimize iostream": {
        "prefix": "optimizeIO",
        "body": [
            "inline void optimizeIO(void) {",
            "    ios::sync_with_stdio(false);",
            "    cin.tie(NULL), cout.tie(NULL);",
            "}"
        ],
        "description": "Optimize C++ style IO"
    },
    "Mess": {
        "prefix": "Mess",
        "body": [
            "template <class _Tp>",
            "struct Mess {",
            "    std::vector<_Tp> v;",
            "    bool initialized = false;",
            "    inline _Tp origin(int idx) { return v[idx - 1]; }",
            "    inline void insert(_Tp x) { v.push_back(x); }",
            "    template <typename T, typename... V>",
            "    inline void insert(T x, V... v) { insert(x), insert(v...); }",
            "    inline void init(void) {",
            "        sort(v.begin(), v.end()), initialized = true;",
            "        v.erase(unique(v.begin(), v.end()), v.end());",
            "    }",
            "    inline void clear(void) { v.clear(), initialized = false; }",
            "    inline int query(_Tp x) {",
            "        if (!initialized) init();",
            "        return lower_bound(v.begin(), v.end(), x) - v.begin() + 1;",
            "    }",
            "    inline bool exist(_Tp x) { return origin(query(x)) == x; }",
            "};"
        ]
    },
    "Fenwick Tree": {
        "prefix": "Fenwick",
        "body": [
            "template <class T>",
            "struct Fenwick {",
            "    std::vector<T> c;",
            "    inline int lowbit(int x) { return x & -x; }",
            "    inline void merge(T &x, T &y) { x = x + y; }",
            "    inline T subtract(T x, T y) { return x - y; }",
            "    inline void update(size_t pos, T x) {",
            "        for (pos++; pos < c.size(); pos += lowbit(pos)) merge(c[pos], x);",
            "    }",
            "    inline void clear(void) {",
            "        for (auto &x : c) x = T();",
            "    }",
            "    inline T query(size_t pos) {",
            "        T ans = T();",
            "        for (pos++; pos; pos ^= lowbit(pos)) merge(ans, c[pos]);",
            "        return ans;",
            "    }",
            "    inline T query(size_t l, size_t r) {",
            "        return l == 0 ? query(r) : subtract(query(r), query(l - 1));",
            "    }",
            "    inline int kth(const T k) {",
            "        int ans = 0;",
            "        for (int i = 1 << std::__lg(c.size() - 1); i; i >>= 1) {",
            "            if (ans + i < (int)c.size() && c[ans + i] <= k) {",
            "                k -= c[ans + i], ans += i;",
            "            }",
            "        }",
            "        return ans;",
            "    }",
            "    Fenwick(size_t len) : c(len + 2) {}",
            "};"
        ]
    },
    "debug.h": {
        "prefix": "debug.h",
        "body": [
            "#ifdef LOCAL",
            "#include \"debug.h\"",
            "#else",
            "#define dbg(x...)",
            "#endif"
        ]
    },
    "lowbit": {
        "prefix": "lowbit(x)",
        "body": [
            "#define lowbit(x) (x & -x)"
        ]
    },
    "Chtholly Tree": {
        "prefix": "ChthollyTree",
        "body": [
            "struct ChthollyTree {",
            "    using i64 = long long;",
            "    struct Node {",
            "        mutable i64 l, r, v;",
            "        inline bool operator<(const Node &x) const { return l < x.l; }",
            "    };",
            "    std::set<Node> tr;",
            "    typedef std::set<Node>::iterator iterator;",
            "    ChthollyTree(void) = default;",
            "    ChthollyTree(int rng, int val) { init(rng, val); }",
            "    inline void init(i64 rng, i64 val) noexcept { ",
            "        tr.insert({1, rng, val}), tr.insert({rng + 1, rng + 1, 0});",
            "    }",
            "    inline iterator begin(void) const noexcept { return tr.begin(); }",
            "    inline iterator end(void) const noexcept { return tr.end(); }",
            "    inline iterator split(i64 pos) {",
            "        auto it = tr.lower_bound({pos, 0, 0});",
            "        if (it != tr.end() && it->l == pos) return it;",
            "        i64 l = (--it)->l, r = it->r, v = it->v;",
            "        tr.erase(it), tr.insert({l, pos - 1, v});",
            "        return tr.insert({pos, r, v}).first;",
            "    }",
            "    inline void assign(i64 l, i64 r, i64 v) {",
            "        auto R = split(r + 1), L = split(l);",
            "        tr.erase(L, R), tr.insert({l, r, v});",
            "    }",
            "    template <class _Functor> // func(iterator)",
            "    inline void modify(i64 l, i64 r, _Functor func) {",
            "        auto R = split(r + 1), L = split(l);",
            "        for (auto it = L; it != R; it++) func(it);",
            "    }",
            "    template <class _Functor> // func(i64 &, iterator)",
            "    inline i64 query(i64 l, i64 r, _Functor func) {",
            "        i64 ans = 0;",
            "        auto R = split(r + 1);",
            "        for (auto it = split(l); it != R; it++) func(ans, it);",
            "        return ans;",
            "    }",
            "};"
        ]
    },
    "DSU": {
        "prefix": "DSU",
        "body": [
            "struct DSU {",
            "    std::vector<int> fa, siz;",
            "    DSU(int n) : fa(n + 1), siz(n + 1, 1) {",
            "        std::iota(fa.begin(), fa.end(), 0);",
            "    }",
            "    inline int find(int x) {",
            "        return fa[x] == x ? x : fa[x] = find(fa[x]);",
            "    }",
            "    inline bool same(int x, int y) {",
            "        return find(x) == find(y);",
            "    }",
            "    // true if x and y were not in the same set, false otherwise.",
            "    inline bool merge(int x, int y) {",
            "        int fx = find(x), fy = find(y);",
            "        if (fx == fy) return false;",
            "        if (siz[fx] < siz[fy]) swap(fx, fy);",
            "        fa[fy] = fx, siz[fx] += siz[fy], siz[fy] = 0;",
            "        return true;",
            "    }",
            "    // x -> y, a.k.a let x be son of y (disable merge by rank).",
            "    inline bool directed_merge(int x, int y) {",
            "        int fx = find(x), fy = find(y);",
            "        if (fx == fy) return false;",
            "        fa[fx] = fy, siz[fy] += siz[fx], siz[fx] = 0;",
            "        return true;",
            "    }",
            "};"
        ]
    },
    "Mod int": {
        "prefix": "ModInt",
        "body": [
            "template <int mod>",
            "inline int down(int x) { return x >= mod ? x - mod : x; }",
            "template <int mod>",
            "struct ModInt {",
            "    int x;",
            "    ModInt(void) = default;",
            "    ModInt(int x) : x(x) {}",
            "    friend istream& operator>>(istream& in, ModInt& a) {return in >> a.x;}",
            "    friend ostream& operator<<(ostream& out, ModInt a) {return out << a.x;}",
            "    friend ModInt operator+(ModInt a, ModInt b) {return down<mod>(a.x + b.x);}",
            "    friend ModInt operator-(ModInt a, ModInt b) {return down<mod>(a.x - b.x + mod);}",
            "    friend ModInt operator*(ModInt a, ModInt b) {return (long long)a.x * b.x % mod;}",
            "    friend ModInt operator/(ModInt a, ModInt b) {return a * ~b;}",
            "    friend ModInt operator^(ModInt a, long long b) {ModInt ans = 1; for(; b; b >>= 1, a *= a) if(b & 1) ans *= a; return ans;}",
            "    friend ModInt operator~(ModInt a) {return a ^ (mod - 2);}",
            "    friend ModInt operator-(ModInt a) {return down<mod>(mod - a.x);}",
            "    friend ModInt& operator+=(ModInt& a, ModInt b) {return a = a + b;}",
            "    friend ModInt& operator-=(ModInt& a, ModInt b) {return a = a - b;}",
            "    friend ModInt& operator*=(ModInt& a, ModInt b) {return a = a * b;}",
            "    friend ModInt& operator/=(ModInt& a, ModInt b) {return a = a / b;}",
            "    friend ModInt& operator^=(ModInt& a, long long b) {return a = a ^ b;}",
            "    friend ModInt& operator++(ModInt& a) {return a += 1;}",
            "    friend ModInt operator++(ModInt& a, int) {ModInt x = a; a += 1; return x;}",
            "    friend ModInt& operator--(ModInt& a) {return a -= 1;}",
            "    friend ModInt operator--(ModInt& a, int) {ModInt x = a; a -= 1; return x;}",
            "    friend bool operator==(ModInt a, ModInt b) {return a.x == b.x;}",
            "    friend bool operator!=(ModInt a, ModInt b) {return !(a == b);}",
            "};",
            "using mint = ModInt<$1>;",
            "inline void __print(mint x) { cerr << x; }"
        ]
    },
    "HashedString": {
        "prefix": "HashedString",
        "body": [
            "template <int mod, int seed>",
            "struct SingleHash {",
            "    int n;",
            "    std::vector<int> pow, h;",
            "    SingleHash(void) = default;",
            "    SingleHash(std::string &s) { init(s); }",
            "    inline void init(std::string &s) {",
            "        n = s.size(), h.assign(n + 2, 0), pow.assign(n + 2, 1);",
            "        for (int i = 1; i <= n; i++) {",
            "            pow[i] = 1ll * pow[i - 1] * seed % mod;",
            "            h[i] = (1ll * h[i - 1] * seed + s[i - 1]) % mod;",
            "        }",
            "    }",
            "    inline int get_hash(int l, int r) {",
            "        return (h[r + 1] - 1ll * h[l] * pow[r - l + 1] % mod + mod) % mod;",
            "    }",
            "    inline bool check_same(int l1, int r1, int l2, int r2) {",
            "        return get_hash(l1, r1) == get_hash(l2, r2);",
            "    }",
            "};",
            "struct HashedString {",
            "    SingleHash<998244353, 477> H1;",
            "    SingleHash<1000000007, 233> H2;",
            "    HashedString(void) = default;",
            "    HashedString(std::string s) : H1(s), H2(s) {}",
            "    inline void init(std::string s) {",
            "        H1.init(s), H2.init(s);",
            "    }",
            "    std::pair<int, int> get_hash(int l, int r) { // not recommended.",
            "        return {H1.get_hash(l, r), H2.get_hash(l, r)};",
            "    }",
            "    // caution: index begins with zero.",
            "    // If index beginning with one is wanted, use s = ' ' + s",
            "    inline bool check_same(int l1, int r1, int l2, int r2) {",
            "        return H1.check_same(l1, r1, l2, r2) && H2.check_same(l1, r1, l2, r2);",
            "    }",
            "    inline bool check_period(int l, int r, int p) {",
            "        return check_same(l, r - p, l + p, r);",
            "    }",
            "};"
        ]
    },
    "SparseTable": {
        "prefix": "SparseTable",
        "body": [
            "template <class T>",
            "struct MaxInfo {",
            "    T val;",
            "    MaxInfo(void) { val = std::numeric_limits<T>::min(); }",
            "    template <class InitT>",
            "    MaxInfo(InitT x) { val = x; }",
            "    MaxInfo operator+(MaxInfo &x) {",
            "        return {std::max(val, x.val)};",
            "    }",
            "};",
            "template <class T>",
            "struct MinInfo {",
            "    T val;",
            "    MinInfo(void) { val = std::numeric_limits<T>::max(); }",
            "    template <class InitT>",
            "    MinInfo(InitT x) { val = x; }",
            "    MinInfo operator+(MinInfo &x) {",
            "        return {std::min(val, x.val)};",
            "    }",
            "};",
            "template <class T>",
            "struct GcdInfo {",
            "    T val;",
            "    GcdInfo(void) { val = T(); }",
            "    template <class InitT>",
            "    GcdInfo(InitT x) { val = x; }",
            "    GcdInfo operator+(GcdInfo &x) {",
            "#if __cplusplus >= 201703L",
            "        return {std::gcd(x.val, val)};",
            "#else",
            "        return {__gcd(x.val, val)};",
            "#endif",
            "    }",
            "};",
            "template <class T>",
            "class SparseTable {",
            "private:",
            "    int n;",
            "    std::vector<std::vector<T>> ST;",
            "",
            "public:",
            "    SparseTable(void) {}",
            "    SparseTable(int N) : n(N), ST(N, std::vector<T>(std::__lg(N) + 1)) {}",
            "    template <class InitT>",
            "    SparseTable(std::vector<InitT> &init) : SparseTable(init.size()) {",
            "        for (int i = 0; i < n; i++) ST[i][0] = T(init[i]);",
            "        for (int i = 1; (1 << i) <= n; i++) {",
            "            for (int j = 0; j + (1 << i) - 1 < n; j++) {",
            "                ST[j][i] = ST[j][i - 1] + ST[j + (1 << (i - 1))][i - 1];",
            "            }",
            "        }",
            "    }",
            "    inline T query(int l, int r) { // 0 based",
            "        if (l > r) return T();",
            "        int w = std::__lg(r - l + 1);",
            "        return ST[l][w] + ST[r - (1 << w) + 1][w];",
            "    }",
            "    inline T disjoint_query(int l, int r) {",
            "        T ans = T();",
            "        for (int i = l; i <= r; i += (1 << std::__lg(r - i + 1))) {",
            "            ans = ans + ST[i][std::__lg(r - i + 1)];",
            "        }",
            "        return ans;",
            "    }",
            "};"
        ]
    },
    "AppearStatistics": {
        "prefix": "AppearStats",
        "body": [
            "template <class T>",
            "class AppearStats { // Appear Statistics.",
            "private:",
            "    Mess<T> M;",
            "    size_t n;",
            "    std::vector<std::vector<int>> pos;",
            "",
            "public:",
            "    AppearStats(void) : n(0) {}",
            "    AppearStats(std::vector<T> &init) : n(init.size()) { _init(init); }",
            "    inline void _init(std::vector<T> &init) {",
            "        for (auto item : init) M.insert(item);",
            "        n = init.size(), M.init(), pos.resize(M.v.size());",
            "        for (size_t i = 0; i < n; i++) {",
            "            pos[M.query(init[i]) - 1].push_back(i);",
            "        }",
            "    }",
            "    // Use「base」as the beginning of index, return -1 if x doesn't exist.",
            "    inline int first(int l, int r, T x, int base = 0) {",
            "        l -= base, r -= base;",
            "        if (!M.exist(x)) return -1;",
            "        std::vector<int> &P = pos[M.query(x) - 1];",
            "        auto it = std::lower_bound(P.begin(), P.end(), l);",
            "        return it == P.end() || *it > r ? -1 : *it + base;",
            "    }",
            "    // Use「base」as the beginning of index, return -1 if x doesn't exist.",
            "    inline int last(int l, int r, T x, int base = 0) {",
            "        l -= base, r -= base;",
            "        if (!M.exist(x)) return -1;",
            "        std::vector<int> &P = pos[M.query(x) - 1];",
            "        auto it = std::upper_bound(P.begin(), P.end(), r);",
            "        return it == P.begin() || *std::prev(it) < l ? -1 : *std::prev(it) + base;",
            "    }",
            "    inline int count(int l, int r, T x, int base = 0) {",
            "        l -= base, r -= base;",
            "        if (!M.exist(x)) return 0;",
            "        std::vector<int> &P = pos[M.query(x) - 1];",
            "        auto L = std::lower_bound(P.begin(), P.end(), l);",
            "        auto R = std::upper_bound(P.begin(), P.end(), r);",
            "        if (L == P.end() || R == P.begin()) return 0;",
            "        if (*L > r || *std::prev(R) < l) return 0;",
            "        return R - L;",
            "    }",
            "};"
        ]
    },
    "RandIO": {
        "prefix": "RandIO",
        "body": [
            "namespace RandIO {",
            "    bool rand_mode = false, optimized = false;",
            "    mt19937 rand((uint32_t)chrono::steady_clock::now()",
            "                     .time_since_epoch()",
            "                     .count()",
            "    );",
            "    inline void optimizeIO(void) {",
            "        optimized = true;",
            "        ios::sync_with_stdio(false);",
            "        cin.tie(NULL), cout.tie(NULL);",
            "    }",
            "    template <class T>",
            "    inline void read(T &x, double l = 0, double r = 0) {",
            "        if (!optimized) optimizeIO();",
            "        if (!rand_mode) {",
            "            std::cin >> x;",
            "        } else {",
            "            uniform_real_distribution<double> rnd(l, r + 1e-7);",
            "            x = rnd(rand);",
            "        }",
            "    }",
            "};",
            "using RandIO::read;"
        ]
    },
    "Sum": {
        "prefix": "Sum",
        "body": [
            "template <class T>",
            "class Sum {",
            "private:",
            "    size_t n;",
            "    std::vector<T> sum;",
            "public:",
            "    Sum(void) : n(0) {}",
            "    template <class InitT>",
            "    Sum(std::vector<InitT> &init) { _init(init); }",
            "    template <class InitT>",
            "    inline void _init(std::vector<InitT> &init) {",
            "        if (init.empty()) return;",
            "        sum.resize(n = init.size()), sum[0] = init[0];",
            "        for (size_t i = 1; i < n; i++) {",
            "            sum[i] = sum[i - 1] + init[i];",
            "        }",
            "    }",
            "    inline T query(int l, int r) {",
            "        if (l > r) return T();",
            "        return l == 0 ? sum[r] : sum[r] - sum[l - 1];",
            "    }",
            "};"
        ]
    },
    "GridSum": {
        "prefix": "GridSum",
        "body": [
            "template <class T>",
            "class GridSum {",
            "private:",
            "    size_t n, m;",
            "    std::vector<std::vector<T>> sum;",
            "public:",
            "    GridSum(void) : n(0), m(0) {}",
            "    template <class InitT>",
            "    GridSum(std::vector<std::vector<InitT>> &init) { _init(init); }",
            "    template <class InitT>",
            "    inline void _init(std::vector<std::vector<InitT>> &init) {",
            "        if (init.empty()) return;",
            "        n = init.size(), m = init[0].size();",
            "        sum.assign(n, std::vector<T>(m)), sum[0][0] = init[0][0];",
            "        for (size_t i = 1; i < n; i++) {",
            "            sum[i][0] = sum[i - 1][0] + init[i][0];",
            "        }",
            "        for (size_t i = 1; i < m; i++) {",
            "            sum[0][i] = sum[0][i - 1] + init[0][i];",
            "        }",
            "        for (size_t i = 1; i < n; i++) {",
            "            for (size_t j = 1; j < m; j++) {",
            "                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + init[i][j];",
            "            }",
            "        }",
            "    }",
            "    inline T query(int x1, int y1, int x2, int y2) {",
            "        T s1 = x1 == 0 ? 0 : sum[x1 - 1][y2];",
            "        T s2 = y1 == 0 ? 0 : sum[x2][y1 - 1];",
            "        T s3 = x1 == 0 || y1 == 0 ? 0 : sum[x1 - 1][y1 - 1];",
            "        return sum[x2][y2] - s1 - s2 + s3;",
            "    }",
            "};"
        ]
    },
    "YesNo": {
        "prefix": "YesNo",
        "body": [
            "inline void YES(void) { cout << \"YES\\n\"; }",
            "inline void Yes(void) { cout << \"Yes\\n\"; }",
            "inline void NO(void) { cout << \"NO\\n\"; }",
            "inline void No(void) { cout << \"No\\n\"; }",
            "inline void YES_NO(bool cond) { cond ? YES() : NO(); }",
            "inline void Yes_No(bool cond) { cond ? Yes() : No(); }"
        ]
    },
    "Comb": {
        "prefix": "Comb",
        "body": [
            "template <class mint>",
            "struct Comb {",
            "    int n;",
            "    std::vector<mint> _fac, _invfac, _inv;",
            "    Comb(void) : n{0}, _fac{1}, _invfac{1}, _inv{0} {}",
            "    Comb(int n) : Comb() { init(n); }",
            "    inline void init(int m) {",
            "        _fac.resize(m + 1), _inv.resize(m + 1), _invfac.resize(m + 1);",
            "        for (int i = n + 1; i <= m; i++) {",
            "            _fac[i] = _fac[i - 1] * i;",
            "        }",
            "        _invfac[m] = ~_fac[m];",
            "        for (int i = m; i > n; i--) {",
            "            _invfac[i - 1] = _invfac[i] * i;",
            "            _inv[i] = _invfac[i] * _fac[i - 1];",
            "        }",
            "        n = m;",
            "    }",
            "    inline mint fac(int m) {",
            "        if (m > n) init(m);",
            "        return _fac[m];",
            "    }",
            "    inline mint invfac(int m) {",
            "        if (m > n) init(m);",
            "        return _invfac[m];",
            "    }",
            "    inline mint inv(int m) {",
            "        if (m > n) init(m);",
            "        return _inv[m];",
            "    }",
            "    inline mint binom(int n, int m) {",
            "        if (n < m || m < 0) return 0;",
            "        return fac(n) * invfac(m) * invfac(n - m);",
            "    }",
            "};",
            "Comb<mint> comb;"
        ]
    },
    "01-Trie": {
        "prefix": "BinaryTrie",
        "body": [
            "// Thanks neal for this template.",
            "const int BITS = 30;",
            "const int INF = 1e9 + 7;",
            "struct BinaryTrie { // 01-Trie",
            "    static const int ALPHABET = 2;",
            "    struct Node {",
            "        const int parent;",
            "        int words_here = 0;    // How many words EXACTLY here.",
            "        int starting_with = 0; // How many words have the PREFIX of this node.",
            "        int min_index = INF;   // The minimum index of words which have PREFIX of this node.",
            "        int max_index = -INF;  // The maximum index of words which have PREFIX of this node.",
            "        std::array<int, ALPHABET> child;",
            "        Node(int p = -1) : parent(p) { child.fill(-1); }",
            "    };",
            "    static const int ROOT = 0;",
            "    std::vector<Node> tr = {Node()};",
            "    BinaryTrie(int total_length = -1) { // Sum of |s|, leave -1 if don't know.",
            "        if (total_length >= 0) tr.reserve(total_length + 1);",
            "    }",
            "    // Returns the Node reference of word.",
            "    // NOTICE: this function creates a new Node if word isn't in the trie.",
            "    Node &operator[](uint64_t word) {",
            "        return tr[build(word, 0)];",
            "    }",
            "    // Get or create c-th (c = 0, 1) child of node",
            "    // Returns BinaryTrie node.",
            "    int get_or_create_child(int node, int c) {",
            "        if (tr[node].child[c] == -1) {",
            "            tr[node].child[c] = (int)tr.size();",
            "            tr.push_back(Node(node));",
            "        }",
            "        return tr[node].child[c];",
            "    }",
            "    // Build rootpath of word, insert delta (个) words",
            "    // Returns BinaryTrie node.",
            "    int build(uint64_t word, int delta) {",
            "        int node = ROOT;",
            "        for (int i = BITS - 1; i >= 0; i--) {",
            "            tr[node].starting_with += delta;",
            "            node = get_or_create_child(node, word >> i & 1);",
            "        }",
            "        tr[node].starting_with += delta;",
            "        return node;",
            "    }",
            "    // Insert a word with the index of index, INF if index is unknown.",
            "    // Returns BinaryTrie node.",
            "    int insert(uint64_t word, int index = INF) {",
            "        int node = build(word, 1);",
            "        tr[node].words_here += 1;",
            "        for (int x = node; x != -1; x = tr[x].parent) {",
            "            if (index != INF) {",
            "                tr[x].min_index = std::min(tr[x].min_index, index);",
            "                tr[x].max_index = std::max(tr[x].max_index, index);",
            "            }",
            "        }",
            "        return node;",
            "    }",
            "    // Find such an x inserted in the trie that word ^ x is minimized.",
            "    // Returns such x (x is certain).",
            "    uint64_t query_min(uint64_t word) {",
            "        int node = ROOT;",
            "        uint64_t val = 0;",
            "        for (int i = BITS - 1; i >= 0; i--) {",
            "            int go_bit = word >> i & 1;",
            "            if (tr[node].child[go_bit] == -1) {",
            "                go_bit ^= 1;",
            "            }",
            "            val |= 1ull << go_bit;",
            "            node = tr[node].child[go_bit];",
            "        }",
            "        return val;",
            "    }",
            "    // Find such an x inserted in the trie that word ^ x is maximized.",
            "    // Returns such x (x is certain).",
            "    uint64_t query_max(uint64_t word) {",
            "        int node = ROOT;",
            "        uint64_t val = 0;",
            "        for (int i = BITS - 1; i >= 0; i--) {",
            "            int go_bit = (word >> i & 1) ^ 1;",
            "            if (tr[node].child[go_bit] == -1) {",
            "                go_bit ^= 1;",
            "            }",
            "            val |= 1ull << go_bit;",
            "            node = tr[node].child[go_bit];",
            "        }",
            "        return val;",
            "    }",
            "    // CF1983F: Find such an x inserted in the trie that word ^ x < upper_bound",
            "    // Returns a pair {min_index, max_index} of x.",
            "    std::pair<int, int> query_ub(uint64_t word, uint64_t upper_bound) {",
            "        int mn = INF, mx = -INF, node = ROOT;",
            "        for (int i = BITS - 1; i >= 0; i--) {",
            "            int word_bit = word >> i & 1;      // digit i of word",
            "            int ub_bit = upper_bound >> i & 1; // digit i of ub",
            "            if (ub_bit == 1 && tr[node].child[word_bit] != -1) {",
            "                // if digit i of ub is 1, then we can choose either",
            "                // the subtree of word_bit or word_bit ^ 1.",
            "                mn = std::min(mn, tr[tr[node].child[word_bit]].min_index);",
            "                mx = std::max(mx, tr[tr[node].child[word_bit]].max_index);",
            "            }",
            "            // else if digit i of ub is 0, then we can only choose",
            "            // the subtree of word_bit. (otherwise, we will violate the range)",
            "            node = tr[node].child[word_bit ^ ub_bit];",
            "            if (node == -1) break;",
            "        }",
            "        return {mn, mx};",
            "    }",
            "};"
        ]
    },
    "sliding window": {
        "prefix": "sliding_window",
        "body": [
            "template <class T> // default max.",
            "std::vector<T> sliding_window(std::vector<T> A, size_t k) {",
            "    std::vector<T> res;",
            "    std::deque<size_t> Q;",
            "    for (size_t i = 0; i < A.size(); i++) {",
            "        if (!Q.empty() && Q[0] + k == i) {",
            "            Q.pop_front();",
            "        }",
            "        while (!Q.empty() && A[Q.back()] <= A[i]) {",
            "            Q.pop_back();",
            "        }",
            "        Q.push_back(i);",
            "        if (i >= k - 1) { // warning: assert k >= 1",
            "            res.push_back(A[Q[0]]);",
            "        }",
            "    }",
            "    return res;",
            "}",
            "template <class T>",
            "std::vector<std::vector<T>> grid_sliding_window(",
            "    std::vector<std::vector<T>> &A, size_t x, size_t y",
            ") {",
            "    const size_t n = A.size(), m = A[0].size();",
            "    std::vector<std::vector<T>> cols(m - y + 1);",
            "    std::vector<std::vector<T>> ans(n - x + 1, std::vector<T>(m - y + 1));",
            "    for (size_t i = 0; i < n; i++) {",
            "        std::vector<T> res = sliding_window(A[i], y);",
            "        for (size_t j = 0; j <= m - y; j++) {",
            "            cols[j].push_back(res[j]);",
            "        }",
            "    }",
            "    for (size_t j = 0; j <= m - y; j++) {",
            "        std::vector<T> res = sliding_window(cols[j], x);",
            "        for (size_t i = 0; i <= n - x; i++) {",
            "            ans[i][j] = res[i];",
            "        }",
            "    }",
            "    return ans;",
            "}"
        ]
    },
    "CancelDSU": {
        "prefix": "CancelDSU",
        "body": [
            "struct CancelDSU {",
            "    std::stack<int> S;",
            "    std::vector<int> fa, siz;",
            "    CancelDSU(int n) : fa(n + 1), siz(n + 1, 1) {",
            "        std::iota(fa.begin(), fa.end(), 0);",
            "    }",
            "    inline int find(int x) {",
            "        return fa[x] == x ? x : find(fa[x]);",
            "    }",
            "    inline bool same(int x, int y) {",
            "        return find(x) == find(y);",
            "    }",
            "    inline void merge(int u, int v) {",
            "        int fu = find(u), fv = find(v);",
            "        if (fu == fv) return S.push(-1);",
            "        if (siz[fu] < siz[fv]) swap(fu, fv);",
            "        siz[fu] += siz[fv], fa[fv] = fu, S.push(fv);",
            "    }",
            "    inline void _cancel(void) {",
            "        if (S.empty()) return;",
            "        if (S.top() == -1) return S.pop();",
            "        siz[fa[S.top()]] -= siz[S.top()];",
            "        fa[S.top()] = S.top(), S.pop();",
            "    }",
            "    inline void cancel(int t = 1) {",
            "        while (t--) _cancel();",
            "    }",
            "};"
        ]
    },
    "randint": {
        "prefix": "randint",
        "body": [
            "mt19937 rnd(time(0));",
            "inline int randint(int l, int r) {",
            "    auto rng = uniform_int_distribution<int>(l, r);",
            "    return rng(rnd);",
            "}"
        ]
    },
    "chkmax and chkmin": {
        "prefix": "chk",
        "body": [
            "template <class T>",
            "void chkmax(T &x, T y) { x = std::max(x, y); }",
            "template <class T>",
            "void chkmin(T &x, T y) { x = std::min(x, y); }"
        ]
    },
    "Weighted DSU": {
        "prefix": "WeightedDSU",
        "body": [
            "template <class T>",
            "struct WeightedDSU {",
            "    std::vector<int> fa;",
            "    std::vector<T> w;",
            "    WeightedDSU(int n) : fa(n + 1), w(n + 1) {",
            "        std::iota(fa.begin(), fa.end(), 0);",
            "    }",
            "    inline int find(int x) {",
            "        if (fa[x] == x) return x;",
            "        int f = fa[x], f2 = find(f);",
            "        return w[x] += w[f], fa[x] = f2;",
            "    }",
            "    inline bool same(int x, int y) {",
            "        return find(x) == find(y);",
            "    }",
            "    // Given info: a[x] + v = a[y]",
            "    // Returns true if this operation has no conflict, false otherwise.",
            "    inline bool merge(int x, int y, T v) {",
            "        int fx = find(x), fy = find(y);",
            "        if (fx == fy) {",
            "            return w[x] + v == w[y];",
            "        }",
            "        w[fy] = w[x] + v - w[y], fa[fy] = fx;",
            "        return true;",
            "    }",
            "    inline T distance(int x, int y) {",
            "        return find(x), find(y), w[y] - w[x];",
            "    }",
            "};"
        ]
    }
}